import java.util.Random;
import java.util.Scanner;
//AMIR HOSSEIN ROOSTA
public class Main {


    public static String BF1(String s) {
        return new StringBuilder(s).reverse().toString();
    }

    public static String BF2(String s) {
        StringBuilder result = new StringBuilder();
        for (char c : s.toCharArray()) {
            result.append(c).append(c);
        }
        return result.toString();
    }

    public static String BF3(String s) {
        return s + s;
    }

    public static String BF4(String s) {
        return s.charAt(s.length() - 1) + s.substring(0, s.length() - 1);
    }

    public static String BF5(String s) {
        StringBuilder result = new StringBuilder();
        for (char c : s.toCharArray()) {
            result.append((char) (219 - c));
        }
        return result.toString();
    }


    public static String WF1(String s1, String s2) {
        StringBuilder result = new StringBuilder();
        int minLen = Math.min(s1.length(), s2.length());
        for (int i = 0; i < minLen; i++) {
            result.append(s1.charAt(i)).append(s2.charAt(i));
        }
        if (s1.length() > s2.length()) {
            result.append(s1.substring(minLen));
        } else {
            result.append(s2.substring(minLen));
        }
        return result.toString();
    }

    public static String WF2(String s1, String s2) {
        return s1 + new StringBuilder(s2).reverse();
    }

    public static String WF3(String s1, String s2) {
        StringBuilder result = new StringBuilder();
        int len1 = s1.length(), len2 = s2.length();
        for (int i = 0; i < Math.max(len1, len2); i++) {
            if (i < len1) {
                result.append(s1.charAt(i));
            }
            if (i < len2) {
                result.append(s2.charAt(len2 - 1 - i));
            }
        }
        return result.toString();
    }

    public static String WF4(String s1, String s2) {
        if (s1.length() % 2 == 0) {
            return new StringBuilder(s1).reverse().toString();
        } else {
            return new StringBuilder(s2).reverse().toString();
        }
    }

    public static String WF5(String s1, String s2) {
        StringBuilder result = new StringBuilder();
        int len1 = s1.length(), len2 = s2.length();
        for (int i = 0; i < Math.max(len1, len2); i++) {
            if (i < len1 && i < len2) {
                char combined = (char) (((s1.charAt(i) - 'a') + (s2.charAt(i) - 'a')) % 26 + 'a');
                result.append(combined);
            } else if (i < len1) {
                result.append(s1.charAt(i));
            } else {
                result.append(s2.charAt(i));
            }
        }
        return result.toString();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String inputString = scanner.nextLine();
        Random random = new Random();
        int[][] machine = new int[n][n];
        for (int i = 0; i < machine.length; i++) {
            for (int j = 0; j < machine[0].length; j++) {
                machine[i][j] = random.nextInt(5) + 1;
            }
        }
        for (int[] ints : machine) {
            for (int j = 0; j < machine[0].length; j++) {
                System.out.print(ints[j] + "\t");
            }
            System.out.println();
        }

        String[][] grid = new String[n][n];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {

                if (i == 0 && j == 0)
                    grid[i][j] = aBF(machine[i][j], inputString);
                else if (i == 0 && j != n - 1)
                    grid[i][j] = aBF(machine[i][j], grid[i][j - 1]);
                else if (j == 0 && i != n - 1)
                    grid[i][j] = aBF(machine[i][j], grid[i - 1][j]);
                else if (i == 0)
                    grid[i][j] = aBF(machine[i][j], grid[i][j - 1]);
                else if (j == 0)
                    grid[i][j] = aBF(machine[i][j], grid[i - 1][j]);
                else if ( i < n - 1 && j < n - 1){
                    grid[i][j] = aBF(machine[i][j], grid[i - 1][j]);
                    grid[i][j] = aBF(machine[i][j], grid[i][j - 1]);}
                else if (i == n - 1)
                    grid[i][j] = aWF(machine[i][j], grid[i - 1][j], grid[i][j - 1]);
                else if (j == n - 1)
                    grid[i][j] = aWF(machine[i][j], grid[i][j - 1], grid[i - 1][j]);

            }
        }



        System.out.println(grid[n - 1][n - 1]);
    }

    public static String aBF(int functionNumber, String input) {
        switch (functionNumber) {
            case 1:
                return BF1(input);
            case 2:
                return BF2(input);
            case 3:
                return BF3(input);
            case 4:
                return BF4(input);
            case 5:
                return BF5(input);
            default:
                return input;
        }
    }

    public static String aWF(int functionNumber, String s1, String s2) {
        switch (functionNumber) {
            case 1:
                return WF1(s1, s2);
            case 2:
                return WF2(s1, s2);
            case 3:
                return WF3(s1, s2);
            case 4:
                return WF4(s1, s2);
            case 5:
                return WF5(s1, s2);
            default:
                return s1;
        }
    }
}
//AMIR HOSSEIN ROOSTA
